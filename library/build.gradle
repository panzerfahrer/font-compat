description = 'An easy to use library for using custom font families in your Android applications.'

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    provided project(path: ':mock')
    compile 'com.android.support:support-annotations:24.0.0'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task signJars(type: Sign, dependsOn: ['assembleRelease', 'assembleDebug', 'sourcesJar', 'generatePomFileForLibraryPublication']) {
    sign(null, file("$buildDir/outputs/aar/library-release.aar"))
    sign("debug", file("$buildDir/outputs/aar/library-debug.aar"))
    sign("sources", file("$buildDir/libs/library-sources.jar"))
    sign(null, file("$buildDir/publications/library/pom-default.xml"))
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

signing {
    required { rootProject.isRelease }
}

publishing {
    publications {
        "library"(MavenPublication) {
            groupId rootProject.group
            version rootProject.version
            artifactId "font-compat"

            artifact("$buildDir/outputs/aar/library-release.aar") {
                // make sure that the publish triggers assemble first
                builtBy project.tasks.findByName("assembleRelease")
            }

            artifact("$buildDir/outputs/aar/library-debug.aar") {
                // make sure that the publish triggers assemble first
                builtBy project.tasks.findByName("assembleDebug")
                classifier "debug"
            }

            artifact sourcesJar {
                classifier "sources"
            }

            if (signing.required) {
                // Add the signatures
                artifact("$buildDir/outputs/aar/library-release.aar.asc") {
                    classifier null
                    extension 'aar.asc'
                    builtBy project.tasks.findByName('signJars')
                }
                artifact("$buildDir/outputs/aar/library-debug.aar.asc") {
                    classifier 'debug'
                    extension 'aar.asc'
                    builtBy project.tasks.findByName('signJars')
                }
                artifact("$buildDir/libs/library-sources.jar.asc") {
                    classifier 'sources'
                    extension 'jar.asc'
                    builtBy project.tasks.findByName('signJars')
                }

                artifact("$buildDir/publications/library/pom-default.xml.asc") {
                    classifier null
                    extension 'pom.asc'
                    builtBy project.tasks.findByName('signJars')
                }
            }

            // include dependencies
            pom.withXml {
                asNode().appendNode('description', project.description)

                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.getByName('compile', { conf ->
                    conf.allDependencies.each { dep ->
                        // fabric returns null for these values, so skip it
                        if (dep.group?.trim() && dep.name?.trim() && dep.version?.trim()) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)

                            if (dep.group.equals('com.android.support')) {
                                dependencyNode.appendNode('scope', 'provided')
                            }
                        }
                    }
                })

                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'font-compat'
                    url "https://github.com/MeetMe/font-compat"
                    scm {
                        url "https://github.com/MeetMe/font-compat.git"
                        connection "https://github.com/MeetMe/font-compat.git"
                        developerConnection "git@github.com:MeetMe/font-compat.git"
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id 'jhansche'
                            name 'Joe Hansche'
                            email 'jhansche@meetme.com'
                        }
                    }
                }
            }
        }
    }

    repositories {
        if (rootProject.hasProperty('nexusUsername') && rootProject.hasProperty('nexusPassword')) {
            maven {
                credentials {
                    username rootProject.property('nexusUsername')
                    password rootProject.property('nexusPassword')
                }

                url "http://nexus.meetmecorp.com/nexus/content/repositories/" + (rootProject.isRelease ? "releases" : "snapshots")
            }
        }

        if (rootProject.hasProperty('ossUsername') && rootProject.hasProperty('ossPassword')) {
            maven {
                credentials {
                    username rootProject.property('ossUsername')
                    password rootProject.property('ossPassword')
                }

                if (rootProject.isRelease) {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                } else {
                    url 'https://oss.sonatype.org/content/repositories/snapshots'
                }
            }
        }
    }
}
